<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DevOps on Containeers</title><link>https://containeers.github.io/tags/devops/</link><description>Recent content in DevOps on Containeers</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 31 Jan 2025 18:00:00 +0000</lastBuildDate><atom:link href="https://containeers.github.io/tags/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>Mastering Third-Party Helm Charts: Enterprise Best Practices</title><link>https://containeers.github.io/blogs/thirdparty_helm/</link><pubDate>Fri, 31 Jan 2025 18:00:00 +0000</pubDate><guid>https://containeers.github.io/blogs/thirdparty_helm/</guid><description>&lt;p>Helm has become Kubernetes&amp;rsquo;s de facto package manager, allowing teams to deploy applications efficiently. However, enterprises often rely on third-party Helm charts from sources like GitHub, artifacthub, ECR or quay. While these charts offer convenience, using them without proper governance can expose organizations to security risks, operational inefficiencies, and compliance issues.&lt;/p>
&lt;p>Consider a scenario where you rely on the ServiceMonitor CR or specific common labels for monitoring, but the third-party Helm chart does not provide the necessary templates or customization options in &lt;code>helm templates&lt;/code>. Additionally, if you need to manage the chart in Git and deploy it using GitOps in an air-gapped environment, maintaining consistency and security becomes even more challenging. This is where an Overlay Chart comes to the rescue.&lt;/p></description></item></channel></rss>